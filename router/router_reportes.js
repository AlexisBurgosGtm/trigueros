const execute = require('./connection');
const express = require('express');
const router = express.Router();


router.post("/pagosmes_rubro", async (req, res) => {

    const { mes, anio, rubro } = req.body;

    let qry = '';

    qry = `SELECT  CONST_CHEQUES.ID, CONST_CHEQUES.FECHA, CONST_CHEQUES.NOCONTRATO, ISNULL(CONST_CUENTAS.BANCO, CONST_CHEQUES.BANCO) AS BANCO, ISNULL(CONST_CUENTAS.NUMERO, 0) AS NOCUENTA, 
    CONST_CHEQUES.NUMERO AS NOCHEQUE, (CONST_CHEQUES.CANTIDAD *-1) AS IMPORTE, CONST_CHEQUES.RECIBE, CONST_CHEQUES.OBS, CONST_CHEQUES.RUBRO, 
    ISNULL(CONST_CONTRATISTAS_PROYECTO.ASIGNACION, 'SN') AS ASIGNACION, ISNULL(CONST_ACREEDORES.DESACREEDOR, 'A FAVOR') AS DESACREEDOR, ISNULL(CONST_ACREEDORES.TIPO, 'CONTRATANTE') AS TIPO, 
    CONST_PROYECTOS.PROYECTO, CONST_CHEQUES.TIPOCHEQUE, ISNULL(CONST_CHEQUES.USUARIO, '--') AS USUARIO, CONST_CHEQUES.CONCEPTO
FROM            CONST_ACREEDORES RIGHT OUTER JOIN
    CONST_CONTRATISTAS_PROYECTO ON CONST_ACREEDORES.CODACREEDOR = CONST_CONTRATISTAS_PROYECTO.CODACREEDOR RIGHT OUTER JOIN
    CONST_CUENTAS RIGHT OUTER JOIN
    CONST_CHEQUES LEFT OUTER JOIN
    CONST_PROYECTOS ON CONST_CHEQUES.IDPROYECTO = CONST_PROYECTOS.IDPROYECTO ON CONST_CUENTAS.CODCUENTA = CONST_CHEQUES.CODCUENTA ON 
    CONST_CONTRATISTAS_PROYECTO.NOCONTRATO = CONST_CHEQUES.NOCONTRATO
WHERE (MONTH(CONST_CHEQUES.FECHA) = ${mes}) 
    AND (YEAR(CONST_CHEQUES.FECHA) = ${anio}) 
    AND (CONST_CHEQUES.TIPOCHEQUE IN('SUBCONTRATISTA','PROVEEDOR')) 
    AND (CONST_CHEQUES.RUBRO = '${rubro}')
ORDER BY CONST_CHEQUES.BANCO, CONST_CHEQUES.NUMERO`;

    execute.Query(res, qry);

});


router.post("/pagosmes_rubro_fechas", async (req, res) => {

    const { finicial, ffinal, rubro } = req.body;

    let qry = '';

    qry = `SELECT  CONST_CHEQUES.ID, CONST_CHEQUES.FECHA, CONST_CHEQUES.NOCONTRATO, ISNULL(CONST_CUENTAS.BANCO, CONST_CHEQUES.BANCO) AS BANCO, ISNULL(CONST_CUENTAS.NUMERO, 0) AS NOCUENTA, 
    CONST_CHEQUES.NUMERO AS NOCHEQUE, (CONST_CHEQUES.CANTIDAD *-1) AS IMPORTE, CONST_CHEQUES.RECIBE, CONST_CHEQUES.OBS, CONST_CHEQUES.RUBRO, 
    ISNULL(CONST_CONTRATISTAS_PROYECTO.ASIGNACION, 'SN') AS ASIGNACION, ISNULL(CONST_ACREEDORES.DESACREEDOR, 'A FAVOR') AS DESACREEDOR, ISNULL(CONST_ACREEDORES.TIPO, 'CONTRATANTE') AS TIPO, 
    CONST_PROYECTOS.PROYECTO, CONST_CHEQUES.TIPOCHEQUE, ISNULL(CONST_CHEQUES.USUARIO, '--') AS USUARIO, CONST_CHEQUES.CONCEPTO
FROM            CONST_ACREEDORES RIGHT OUTER JOIN
    CONST_CONTRATISTAS_PROYECTO ON CONST_ACREEDORES.CODACREEDOR = CONST_CONTRATISTAS_PROYECTO.CODACREEDOR RIGHT OUTER JOIN
    CONST_CUENTAS RIGHT OUTER JOIN
    CONST_CHEQUES LEFT OUTER JOIN
    CONST_PROYECTOS ON CONST_CHEQUES.IDPROYECTO = CONST_PROYECTOS.IDPROYECTO ON CONST_CUENTAS.CODCUENTA = CONST_CHEQUES.CODCUENTA ON 
    CONST_CONTRATISTAS_PROYECTO.NOCONTRATO = CONST_CHEQUES.NOCONTRATO
WHERE 
    (CONST_CHEQUES.FECHA BETWEEN '${finicial}' AND '${ffinal}') 
    AND (CONST_CHEQUES.TIPOCHEQUE IN('SUBCONTRATISTA','PROVEEDOR')) 
    AND (CONST_CHEQUES.RUBRO = '${rubro}')
ORDER BY CONST_CHEQUES.BANCO, CONST_CHEQUES.NUMERO`;

  
    execute.Query(res, qry);

});

router.post("/pagosmes_rubro_fechas_proyecto", async (req, res) => {

    const { finicial, ffinal, rubro, idproyecto } = req.body;

    let qry = '';

    qry = `SELECT  CONST_CHEQUES.ID, CONST_CHEQUES.FECHA, CONST_CHEQUES.NOCONTRATO, ISNULL(CONST_CUENTAS.BANCO, CONST_CHEQUES.BANCO) AS BANCO, ISNULL(CONST_CUENTAS.NUMERO, 0) AS NOCUENTA, 
    CONST_CHEQUES.NUMERO AS NOCHEQUE, (CONST_CHEQUES.CANTIDAD *-1) AS IMPORTE, CONST_CHEQUES.RECIBE, CONST_CHEQUES.OBS, CONST_CHEQUES.RUBRO, 
    ISNULL(CONST_CONTRATISTAS_PROYECTO.ASIGNACION, 'SN') AS ASIGNACION, ISNULL(CONST_ACREEDORES.DESACREEDOR, 'A FAVOR') AS DESACREEDOR, ISNULL(CONST_ACREEDORES.TIPO, 'CONTRATANTE') AS TIPO, 
    CONST_PROYECTOS.PROYECTO, CONST_CHEQUES.TIPOCHEQUE, ISNULL(CONST_CHEQUES.USUARIO, '--') AS USUARIO, CONST_CHEQUES.CONCEPTO
FROM            CONST_ACREEDORES RIGHT OUTER JOIN
    CONST_CONTRATISTAS_PROYECTO ON CONST_ACREEDORES.CODACREEDOR = CONST_CONTRATISTAS_PROYECTO.CODACREEDOR RIGHT OUTER JOIN
    CONST_CUENTAS RIGHT OUTER JOIN
    CONST_CHEQUES LEFT OUTER JOIN
    CONST_PROYECTOS ON CONST_CHEQUES.IDPROYECTO = CONST_PROYECTOS.IDPROYECTO ON CONST_CUENTAS.CODCUENTA = CONST_CHEQUES.CODCUENTA ON 
    CONST_CONTRATISTAS_PROYECTO.NOCONTRATO = CONST_CHEQUES.NOCONTRATO
WHERE
    (CONST_CHEQUES.IDPROYECTO=${idproyecto}) AND
    (CONST_CHEQUES.FECHA BETWEEN '${finicial}' AND '${ffinal}') 
    AND (CONST_CHEQUES.TIPOCHEQUE IN('SUBCONTRATISTA','PROVEEDOR')) 
    AND (CONST_CHEQUES.RUBRO = '${rubro}')
ORDER BY CONST_CHEQUES.BANCO, CONST_CHEQUES.NUMERO`;

  
    execute.Query(res, qry);

});

router.post("/pagosmes_subcontratista", async (req, res) => {

    const { mes, anio, codsubcontratista } = req.body;

    let qry = '';

    qry = `SELECT  CONST_CHEQUES.ID, CONST_CHEQUES.FECHA, CONST_CHEQUES.NOCONTRATO, ISNULL(CONST_CUENTAS.BANCO, CONST_CHEQUES.BANCO) AS BANCO, ISNULL(CONST_CUENTAS.NUMERO, 0) AS NOCUENTA, 
    CONST_CHEQUES.NUMERO AS NOCHEQUE, (CONST_CHEQUES.CANTIDAD *-1) AS IMPORTE, CONST_CHEQUES.RECIBE, CONST_CHEQUES.OBS, CONST_CHEQUES.RUBRO, 
    ISNULL(CONST_CONTRATISTAS_PROYECTO.ASIGNACION, 'SN') AS ASIGNACION, ISNULL(CONST_ACREEDORES.DESACREEDOR, 'A FAVOR') AS DESACREEDOR, ISNULL(CONST_ACREEDORES.TIPO, 'CONTRATANTE') AS TIPO, 
    CONST_PROYECTOS.PROYECTO, CONST_CHEQUES.TIPOCHEQUE, ISNULL(CONST_CHEQUES.USUARIO, '--') AS USUARIO, CONST_CHEQUES.CONCEPTO
FROM            CONST_ACREEDORES RIGHT OUTER JOIN
    CONST_CONTRATISTAS_PROYECTO ON CONST_ACREEDORES.CODACREEDOR = CONST_CONTRATISTAS_PROYECTO.CODACREEDOR RIGHT OUTER JOIN
    CONST_CUENTAS RIGHT OUTER JOIN
    CONST_CHEQUES LEFT OUTER JOIN
    CONST_PROYECTOS ON CONST_CHEQUES.IDPROYECTO = CONST_PROYECTOS.IDPROYECTO ON CONST_CUENTAS.CODCUENTA = CONST_CHEQUES.CODCUENTA ON 
    CONST_CONTRATISTAS_PROYECTO.NOCONTRATO = CONST_CHEQUES.NOCONTRATO
WHERE (MONTH(CONST_CHEQUES.FECHA) = ${mes}) 
    AND (YEAR(CONST_CHEQUES.FECHA) = ${anio}) 
    AND (CONST_CHEQUES.TIPOCHEQUE = 'SUBCONTRATISTA') 
    AND (CONST_CONTRATISTAS_PROYECTO.CODACREEDOR = ${codsubcontratista})
ORDER BY CONST_CHEQUES.BANCO, CONST_CHEQUES.NUMERO`;

    execute.Query(res, qry);

});

router.post("/pagosmes_subcontratista_fechas", async (req, res) => {

    const { finicial, ffinal, codsubcontratista } = req.body;

    let qry = '';

    qry = `SELECT  CONST_CHEQUES.ID, CONST_CHEQUES.FECHA, CONST_CHEQUES.NOCONTRATO, ISNULL(CONST_CUENTAS.BANCO, CONST_CHEQUES.BANCO) AS BANCO, ISNULL(CONST_CUENTAS.NUMERO, 0) AS NOCUENTA, 
    CONST_CHEQUES.NUMERO AS NOCHEQUE, (CONST_CHEQUES.CANTIDAD *-1) AS IMPORTE, CONST_CHEQUES.RECIBE, CONST_CHEQUES.OBS, CONST_CHEQUES.RUBRO, 
    ISNULL(CONST_CONTRATISTAS_PROYECTO.ASIGNACION, 'SN') AS ASIGNACION, ISNULL(CONST_ACREEDORES.DESACREEDOR, 'A FAVOR') AS DESACREEDOR, ISNULL(CONST_ACREEDORES.TIPO, 'CONTRATANTE') AS TIPO, 
    CONST_PROYECTOS.PROYECTO, CONST_CHEQUES.TIPOCHEQUE, ISNULL(CONST_CHEQUES.USUARIO, '--') AS USUARIO, CONST_CHEQUES.CONCEPTO
FROM            CONST_ACREEDORES RIGHT OUTER JOIN
    CONST_CONTRATISTAS_PROYECTO ON CONST_ACREEDORES.CODACREEDOR = CONST_CONTRATISTAS_PROYECTO.CODACREEDOR RIGHT OUTER JOIN
    CONST_CUENTAS RIGHT OUTER JOIN
    CONST_CHEQUES LEFT OUTER JOIN
    CONST_PROYECTOS ON CONST_CHEQUES.IDPROYECTO = CONST_PROYECTOS.IDPROYECTO ON CONST_CUENTAS.CODCUENTA = CONST_CHEQUES.CODCUENTA ON 
    CONST_CONTRATISTAS_PROYECTO.NOCONTRATO = CONST_CHEQUES.NOCONTRATO
WHERE 
    (CONST_CHEQUES.FECHA BETWEEN '${finicial}' AND '${ffinal}') 
    AND (CONST_CHEQUES.TIPOCHEQUE = 'SUBCONTRATISTA') 
    AND (CONST_CONTRATISTAS_PROYECTO.CODACREEDOR = ${codsubcontratista})
ORDER BY CONST_CHEQUES.BANCO, CONST_CHEQUES.NUMERO`;

    console.log(qry);

    execute.Query(res, qry);

});


router.post("/pagosmes_proveedor_fechas", async (req, res) => {

    const { finicial, ffinal, codproveedor } = req.body;

    let qry = '';

    qry = `SELECT  CONST_CHEQUES.ID, CONST_CHEQUES.FECHA, CONST_CHEQUES.NOCONTRATO, ISNULL(CONST_CUENTAS.BANCO, CONST_CHEQUES.BANCO) AS BANCO, ISNULL(CONST_CUENTAS.NUMERO, 0) AS NOCUENTA, 
    CONST_CHEQUES.NUMERO AS NOCHEQUE, (CONST_CHEQUES.CANTIDAD *-1) AS IMPORTE, CONST_CHEQUES.RECIBE, CONST_CHEQUES.OBS, CONST_CHEQUES.RUBRO, 
    ISNULL(CONST_CONTRATISTAS_PROYECTO.ASIGNACION, 'SN') AS ASIGNACION, ISNULL(CONST_ACREEDORES.DESACREEDOR, 'A FAVOR') AS DESACREEDOR, ISNULL(CONST_ACREEDORES.TIPO, 'CONTRATANTE') AS TIPO, 
    CONST_PROYECTOS.PROYECTO, CONST_CHEQUES.TIPOCHEQUE, ISNULL(CONST_CHEQUES.USUARIO, '--') AS USUARIO, CONST_CHEQUES.CONCEPTO
FROM            CONST_ACREEDORES RIGHT OUTER JOIN
    CONST_CONTRATISTAS_PROYECTO ON CONST_ACREEDORES.CODACREEDOR = CONST_CONTRATISTAS_PROYECTO.CODACREEDOR RIGHT OUTER JOIN
    CONST_CUENTAS RIGHT OUTER JOIN
    CONST_CHEQUES LEFT OUTER JOIN
    CONST_PROYECTOS ON CONST_CHEQUES.IDPROYECTO = CONST_PROYECTOS.IDPROYECTO ON CONST_CUENTAS.CODCUENTA = CONST_CHEQUES.CODCUENTA ON 
    CONST_CONTRATISTAS_PROYECTO.NOCONTRATO = CONST_CHEQUES.NOCONTRATO
WHERE 
    (CONST_CHEQUES.FECHA BETWEEN '${finicial}' AND '${ffinal}') 
    AND CONST_CHEQUES.TIPOCHEQUE='PROVEEDOR'
    AND (CONST_CHEQUES.CODACREEDOR = ${codproveedor})
ORDER BY CONST_CHEQUES.BANCO, CONST_CHEQUES.NUMERO`;

    console.log(qry);

    execute.Query(res, qry);

});


router.post("/pagosmes", async (req, res) => {

    const { finicial, ffinal } = req.body;

    let qry = '';

    qry = `SELECT        CONST_CHEQUES.ID, CONST_CHEQUES.FECHA, CONST_CHEQUES.NOCONTRATO, ISNULL(CONST_CUENTAS.BANCO, CONST_CHEQUES.BANCO) AS BANCO, ISNULL(CONST_CUENTAS.NUMERO, 0) AS NOCUENTA, 
    CONST_CHEQUES.NUMERO AS NOCHEQUE, CONST_CHEQUES.CANTIDAD AS IMPORTE, CONST_CHEQUES.RECIBE, CONST_CHEQUES.OBS, CONST_CHEQUES.RUBRO, 
    ISNULL(CONST_CONTRATISTAS_PROYECTO.ASIGNACION, 'SN') AS ASIGNACION, ISNULL(CONST_ACREEDORES.DESACREEDOR, 'A FAVOR') AS DESACREEDOR, ISNULL(CONST_ACREEDORES.TIPO, 'CONTRATANTE') AS TIPO, 
    CONST_PROYECTOS.PROYECTO, CONST_CHEQUES.TIPOCHEQUE, ISNULL(CONST_CHEQUES.USUARIO, '--') AS USUARIO, CONST_ACREEDORES_1.DESACREEDOR AS DESACREEDOR2
FROM            CONST_CHEQUES LEFT OUTER JOIN
    CONST_ACREEDORES AS CONST_ACREEDORES_1 ON CONST_CHEQUES.CODACREEDOR = CONST_ACREEDORES_1.CODACREEDOR LEFT OUTER JOIN
    CONST_PROYECTOS ON CONST_CHEQUES.IDPROYECTO = CONST_PROYECTOS.IDPROYECTO LEFT OUTER JOIN
    CONST_CUENTAS ON CONST_CHEQUES.CODCUENTA = CONST_CUENTAS.CODCUENTA FULL OUTER JOIN
    CONST_CONTRATISTAS_PROYECTO FULL OUTER JOIN
    CONST_ACREEDORES ON CONST_CONTRATISTAS_PROYECTO.CODACREEDOR = CONST_ACREEDORES.CODACREEDOR ON CONST_CHEQUES.NOCONTRATO = CONST_CONTRATISTAS_PROYECTO.NOCONTRATO
            WHERE (CONST_CHEQUES.FECHA BETWEEN '${finicial}' AND '${ffinal}')  AND CONST_CHEQUES.TIPOCHEQUE<>'CONTRATANTE'
    ORDER BY CONST_CHEQUES.FECHA`;

    execute.Query(res, qry);




});

router.post("/pagosmes_tipo", async (req, res) => {

    const { finicial, ffinal, tipo } = req.body;

    let qry = '';

    qry = `SELECT        CONST_CHEQUES.ID, CONST_CHEQUES.FECHA, CONST_CHEQUES.NOCONTRATO, ISNULL(CONST_CUENTAS.BANCO, CONST_CHEQUES.BANCO) AS BANCO, ISNULL(CONST_CUENTAS.NUMERO, 0) AS NOCUENTA, 
    CONST_CHEQUES.NUMERO AS NOCHEQUE, CONST_CHEQUES.CANTIDAD AS IMPORTE, CONST_CHEQUES.RECIBE, CONST_CHEQUES.OBS, CONST_CHEQUES.RUBRO, 
    ISNULL(CONST_CONTRATISTAS_PROYECTO.ASIGNACION, 'SN') AS ASIGNACION, ISNULL(CONST_ACREEDORES.DESACREEDOR, 'A FAVOR') AS DESACREEDOR, ISNULL(CONST_ACREEDORES.TIPO, 'CONTRATANTE') AS TIPO, 
    CONST_PROYECTOS.PROYECTO, CONST_CHEQUES.TIPOCHEQUE, ISNULL(CONST_CHEQUES.USUARIO, '--') AS USUARIO, CONST_ACREEDORES_1.DESACREEDOR AS DESACREEDOR2
FROM            CONST_CHEQUES LEFT OUTER JOIN
    CONST_ACREEDORES AS CONST_ACREEDORES_1 ON CONST_CHEQUES.CODACREEDOR = CONST_ACREEDORES_1.CODACREEDOR LEFT OUTER JOIN
    CONST_PROYECTOS ON CONST_CHEQUES.IDPROYECTO = CONST_PROYECTOS.IDPROYECTO LEFT OUTER JOIN
    CONST_CUENTAS ON CONST_CHEQUES.CODCUENTA = CONST_CUENTAS.CODCUENTA FULL OUTER JOIN
    CONST_CONTRATISTAS_PROYECTO FULL OUTER JOIN
    CONST_ACREEDORES ON CONST_CONTRATISTAS_PROYECTO.CODACREEDOR = CONST_ACREEDORES.CODACREEDOR ON CONST_CHEQUES.NOCONTRATO = CONST_CONTRATISTAS_PROYECTO.NOCONTRATO
WHERE (CONST_CHEQUES.FECHA BETWEEN '${finicial}' AND '${ffinal}')  
AND CONST_CHEQUES.TIPOCHEQUE='${tipo}'
    ORDER BY CONST_CHEQUES.FECHA`;

    execute.Query(res, qry);




});



router.post("/pagosacreedor", async (req, res) => {

    const { mes, anio, codacreedor } = req.body;

    let qry = '';

    qry = ` `

    execute.Query(res, qry);

});


module.exports = router;